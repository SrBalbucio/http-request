#https://www.guardsquare.com/en/proguard/manual/introduction

# Java runtime
-libraryjars <java.home>/lib/rt.jar
-verbose
#-dontnote

-optimizations !code/allocation/variable
#-keepparameternames
-renamesourcefileattribute SourceFile
-repackageclasses 'com.github.nidorx.gson'
-allowaccessmodification

# Annotations and signatures
-keepattributes *Annotation*,Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod


# Preserva todas as classes publicas, seus métodos public e protected
-keep public class com.github.nidorx.http.** {
    public protected *;
}

# Preserva os nomes de métods de todas as .class
-keepclassmembernames class * {
    java.lang.Class class$(java.lang.String);
    java.lang.Class class$(java.lang.String, boolean);
}

# Preserva todos os nomes de métodos nativos e o nome de suas classes
-keepclasseswithmembernames class * {
    native <methods>;
}

# Preserve the special static methods that are required in all enumeration classes.
-keepclassmembers class * extends java.lang.Enum {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# Explicitly preserve all serialization members. The Serializable interface
# is only a marker interface, so it wouldn't save them.
# You can comment this out if your library doesn't use serialization.
# If your code contains serializable classes that have to be backward
# compatible, please refer to the manual.

-keepclassmembers class * implements java.io.Serializable {
    java.lang.Object readResolve();
    java.lang.Object writeReplace();
    static final long serialVersionUID;
    private void readObject(java.io.ObjectInputStream);
    private void writeObject(java.io.ObjectOutputStream);
    static final java.io.ObjectStreamField[] serialPersistentFields;
}
